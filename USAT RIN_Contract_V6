// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol";

contract RINRegistration is Initializable, ERC721Upgradeable, ERC721URIStorageUpgradeable, AccessControlUpgradeable, PausableUpgradeable {
    using StringsUpgradeable for uint256;

    // Define roles
    bytes32 public constant REGISTRAR_ROLE = keccak256("REGISTRAR_ROLE");
    bytes32 public constant APPROVER_ROLE = keccak256("APPROVER_ROLE");

    struct RIN {
        uint256 tokenId;
        string rinNumber;
        bytes32 fileHash; // SHA256 hash of the RIN file
    }

    mapping(string => uint256) private _rinNumberToTokenId;
    mapping(uint256 => RIN) private _tokenDetails;

    event RINRegistered(uint256 indexed tokenId, string rinNumber, bytes32 fileHash);
    event RINApproved(uint256 indexed tokenId);

    function initialize() public initializer {
        __ERC721_init("USAT RIN", "RIN");
        __ERC721URIStorage_init();
        __AccessControl_init();
        __Pausable_init();
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(REGISTRAR_ROLE, msg.sender);
        _setupRole(APPROVER_ROLE, msg.sender);
    }

    function registerRIN(string memory rinNumber, string memory metadataURI, bytes32 fileHash) public onlyRole(REGISTRAR_ROLE) {
        require(_rinNumberToTokenId[rinNumber] == 0, "RINRegistration: RIN already registered");

        uint256 tokenId = totalSupply().add(1);
        _rinNumberToTokenId[rinNumber] = tokenId;
        _tokenDetails[tokenId] = RIN(tokenId, rinNumber, fileHash);

        _mint(msg.sender, tokenId);
        _setTokenURI(tokenId, metadataURI);

        emit RINRegistered(tokenId, rinNumber, fileHash);
    }

    function approveRIN(uint256 tokenId) public onlyRole(APPROVER_ROLE) {
        require(_exists(tokenId), "RINRegistration: Nonexistent token");
        // Additional approval logic can be implemented here
        emit RINApproved(tokenId);
    }

    function getRINDetails(uint256 tokenId) public view returns (RIN memory) {
        require(_exists(tokenId), "RINRegistration: Nonexistent token");
        return _tokenDetails[tokenId];
    }

    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {
        _unpause();
    }

    function _burn(uint256 tokenId) internal override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {
        super._burn(tokenId);
        delete _rinNumberToTokenId[_tokenDetails[tokenId].rinNumber];
        delete _tokenDetails[tokenId];
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);

        if (paused()) {
            revert("RINRegistration: token transfer while paused");
        }
    }

    // Additional functions for role management, upgradeability, and data validation
    // Note: Comprehensive testing and documentation are essential for production readiness
}

