// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

contract USATRins is Initializable, ERC721Upgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, OwnableUpgradeable {
    using SafeMathUpgradeable for uint256;

    struct RIN {
        uint16 yearBatch;
        uint32 assetPrice;
        uint8 usatScore;
        MarketType market;
    }

    enum MarketType { Mandatory, OTC }

    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    uint256 private totalRINs;
    mapping(uint256 => RIN) private RINs;

    event RINRegistered(uint256 indexed rinId, uint16 yearBatch);
    event AssetPriceUpdated(uint256 indexed rinId, uint32 newPrice);
    event USATScoreUpdated(uint256 indexed rinId, uint8 newScore);

    function initialize(string memory name, string memory symbol) public initializer {
        __ERC721_init(name, symbol);
        __AccessControl_init();
        __Ownable_init();
        __Pausable_init();
        __ReentrancyGuard_init();

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(ADMIN_ROLE, _msgSender());
    }

    function registerRIN(
        uint16 yearBatch,
        uint32 assetPrice,
        uint8 usatScore,
        MarketType market
    ) external onlyAdmin returns (uint256) {
        totalRINs = totalRINs.add(1);
        RINs[totalRINs] = RIN({
            yearBatch: yearBatch,
            assetPrice: assetPrice,
            usatScore: usatScore,
            market: market
        });

        _safeMint(_msgSender(), totalRINs);
        emit RINRegistered(totalRINs, yearBatch);
        return totalRINs;
    }

    function updatePrice(uint256 rinId, uint32 newPrice) external onlyAdmin {
        require(rinId <= totalRINs, "USATRins: RIN does not exist");
        RINs[rinId].assetPrice = newPrice;
        emit AssetPriceUpdated(rinId, newPrice);
    }

    function updateUSATScore(uint256 rinId, uint8 newScore) external onlyAdmin {
        require(rinId <= totalRINs, "USATRins: RIN does not exist");
        RINs[rinId].usatScore = newScore;
        emit USATScoreUpdated(rinId, newScore);
    }

    function getRINDetails(uint256 rinId) public view returns (RIN memory) {
        require(rinId <= totalRINs, "USATRins: RIN does not exist");
        return RINs[rinId];
    }

    // Additional contract logic...
}
